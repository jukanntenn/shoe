{"version":3,"sources":["../src/util/backdrop.ts","../src/offcanvas.ts","../src/scrollspy.ts","../src/dropdown.ts","../src/index.umd.ts"],"names":["Backdrop","constructor","config","this","elem","isAppended","NAME","show","append","hide","dispose","removeEventListener","handleClick","remove","getElement","document","body","addEventListener","bind","backdrop","createElement","className","clickCallback","defaultConfig","Scrollspy","elements","scrollElement","targets","activeTarget","tagName","window","process","Object","assign","refresh","offsetBase","getScrollTop","targetStack","currTarget","getTarget","selector","getSelector","trigger","find","triggerBCR","getBoundingClientRect","width","height","parent","length","element","offset","top","pageYOffset","offsetTop","parse","elems","Array","isArray","Error","target","push","i","ele","t","pop","sort","a","b","scrollTop","getScrollHeight","scrollHeight","Math","max","documentElement","getOffsetHeight","innerHeight","activate","clear","activeClassName","tokens","split","classList","add","forEach","static","hrefAttr","getAttribute","includes","startsWith","trim","Element","prototype","querySelector","call","DefaultConfig","placement","Offcanvas","isShown","oriTransformVal","style","transform","initializeBackDrop","toggle","_a","backdropClassName","Dropdown","triggerElement","targetElement","popper","targetElem","triggerElem","handleClickOutside","ev","clickedElem","contains","display","Popper","createPopper","modifiers","name","options","update","destroy"],"mappings":"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","sourcesContent":["const NAME = \"backdrop\";\n\ntype Config = {\n  className?: string;\n  clickCallback: null | undefined | (() => void);\n};\n\nclass Backdrop {\n  private elem: null | HTMLElement = null;\n\n  private isAppended = false;\n\n  private config;\n\n  constructor(config: Config) {\n    this.config = config;\n  }\n\n  static get NAME() {\n    return NAME;\n  }\n\n  show() {\n    this.append();\n  }\n\n  hide() {\n    this.dispose();\n  }\n\n  dispose() {\n    if (!this.isAppended) {\n      return;\n    }\n    this.elem!.removeEventListener(\"click\", this.handleClick, true);\n    this.elem!.remove();\n    this.isAppended = false;\n  }\n\n  private append() {\n    if (this.isAppended) {\n      return;\n    }\n\n    const elem = this.getElement();\n    document.body.append(elem);\n    elem.addEventListener(\"click\", this.handleClick.bind(this), true);\n\n    this.isAppended = true;\n  }\n\n  private getElement() {\n    if (!this.elem) {\n      const backdrop = document.createElement(\"div\");\n      if (this.config.className) {\n        backdrop.className = this.config.className;\n      }\n      this.elem = backdrop;\n    }\n\n    return this.elem;\n  }\n\n  private handleClick() {\n    if (this.config.clickCallback) {\n      this.config.clickCallback();\n    }\n  }\n}\n\nexport default Backdrop;\n","import Backdrop from \"./util/backdrop\";\n\nconst NAME = \"offcanvas\";\n\ntype Config = {\n  backdrop: boolean;\n  backdropClassName?: string;\n};\n\nconst defaultConfig: Config = {\n  backdrop: true,\n};\n\nclass Offcanvas {\n  private readonly elem;\n\n  private config;\n\n  private backdrop?: Backdrop;\n\n  private readonly oriTransformVal;\n\n  private isShown = false;\n\n  constructor(element: HTMLElement, config?: Config) {\n    this.elem = element;\n    this.config = Object.assign(config || {}, defaultConfig);\n    this.oriTransformVal = this.elem.style.transform;\n    this.backdrop = this.initializeBackDrop();\n  }\n\n  static get NAME() {\n    return NAME;\n  }\n\n  toggle() {\n    return this.isShown ? this.hide() : this.show();\n  }\n\n  show() {\n    this.elem.style.transform = \"none\";\n    this.isShown = true;\n    this.backdrop?.show();\n  }\n\n  hide() {\n    if (!this.isShown) {\n      return;\n    }\n\n    this.elem.style.transform = this.oriTransformVal;\n    this.isShown = false;\n    this.backdrop?.hide();\n  }\n\n  private initializeBackDrop(): undefined | Backdrop {\n    if (!this.config.backdrop) return undefined;\n\n    const clickCallback = () => {\n      this.hide();\n    };\n    return new Backdrop({\n      className: this.config.backdropClassName,\n      clickCallback,\n    });\n  }\n}\n\nexport default Offcanvas;\n","const NAME = \"scrollspy\";\n\ntype Target = {\n  parent: Target | null;\n  element: HTMLElement;\n  offset: number;\n};\n\ntype Config = {\n  activeClassName?: string;\n};\n\nclass Scrollspy {\n  private targets: Target[] = [];\n\n  private scrollElement;\n\n  private activeTarget: null | Target = null;\n\n  private config: Config = {};\n\n  constructor(\n    elements: HTMLElement[],\n    scrollElement: HTMLElement = document.body,\n    config: Config = {}\n  ) {\n    this.scrollElement =\n      scrollElement.tagName === \"BODY\" ? window : scrollElement;\n    this.scrollElement.addEventListener(\"scroll\", () => {\n      this.process();\n    });\n    Object.assign(this.config, config);\n\n    this.refresh(elements);\n    this.process();\n  }\n\n  static get NAME() {\n    return NAME;\n  }\n\n  refresh(elements: HTMLElement[]) {\n    const offsetBase = this.scrollElement === window ? 0 : this.getScrollTop();\n    const targetStack: (Target | null)[] = [];\n    let currTarget: Target | null;\n\n    const getTarget = (elem: HTMLElement): Target | null => {\n      const selector = Scrollspy.getSelector(elem);\n      const trigger = selector\n        ? Scrollspy.find(\n            selector,\n            (this.scrollElement === window\n              ? document.body\n              : this.scrollElement) as HTMLElement\n          )\n        : null;\n      if (!trigger) return null;\n      const triggerBCR = trigger.getBoundingClientRect();\n      return triggerBCR.width || triggerBCR.height\n        ? {\n            parent: targetStack[targetStack.length - 1],\n            element: elem,\n            offset:\n              this.scrollElement === window\n                ? triggerBCR.top + window.pageYOffset + offsetBase\n                : (trigger as HTMLElement).offsetTop + offsetBase,\n          }\n        : null;\n    };\n\n    const parse = (elems: HTMLElement[]) => {\n      if (elems.length === 0 || Array.isArray(elements[0])) {\n        throw new Error(\"Invalid tree structure\");\n      }\n\n      const target = getTarget(elems[0]);\n      if (target !== null) {\n        this.targets.push(target);\n      }\n      currTarget = target;\n      for (let i = 1; i < elems.length; i += 1) {\n        const ele = elems[i];\n        if (Array.isArray(ele)) {\n          targetStack.push(currTarget);\n          parse(ele);\n        } else {\n          const t = getTarget(ele);\n          if (t !== null) {\n            this.targets.push(t);\n          }\n          currTarget = t;\n        }\n      }\n      targetStack.pop();\n    };\n\n    parse(elements);\n    this.targets = this.targets.sort((a, b) => a.offset - b.offset);\n  }\n\n  private getScrollTop() {\n    return this.scrollElement === window\n      ? this.scrollElement.pageYOffset\n      : (this.scrollElement as HTMLElement).scrollTop;\n  }\n\n  private getScrollHeight() {\n    return (\n      (this.scrollElement as HTMLElement).scrollHeight ||\n      Math.max(\n        document.body.scrollHeight,\n        document.documentElement.scrollHeight\n      )\n    );\n  }\n\n  private getOffsetHeight() {\n    return this.scrollElement === window\n      ? window.innerHeight\n      : (this.scrollElement as HTMLElement).getBoundingClientRect().height;\n  }\n\n  private process() {\n    const scrollTop = this.getScrollTop();\n    const scrollHeight = this.getScrollHeight();\n    const maxScroll = scrollHeight - this.getOffsetHeight();\n\n    if (scrollTop >= maxScroll) {\n      const target = this.targets[this.targets.length - 1];\n\n      if (this.activeTarget !== target) {\n        this.activate(target);\n      }\n      return;\n    }\n\n    if (\n      this.activeTarget &&\n      scrollTop < this.targets[0].offset &&\n      this.targets[0].offset > 0\n    ) {\n      this.activeTarget = null;\n      this.clear();\n      return;\n    }\n\n    for (let i = 0; i < this.targets.length; i += 1) {\n      const isActiveTarget =\n        this.activeTarget !== this.targets[i] &&\n        scrollTop >= this.targets[i].offset &&\n        (typeof this.targets[i + 1] === \"undefined\" ||\n          scrollTop < this.targets[i + 1].offset);\n\n      if (isActiveTarget) {\n        this.activate(this.targets[i]);\n      }\n    }\n  }\n\n  private activate(target: Target) {\n    this.activeTarget = target;\n    this.clear();\n\n    if (this.config.activeClassName) {\n      const tokens = this.config.activeClassName.split(\" \");\n      this.activeTarget.element.classList.add(...tokens);\n      let { parent } = target;\n      while (parent) {\n        parent.element.classList.add(...tokens);\n        parent = parent.parent;\n      }\n    }\n  }\n\n  private clear() {\n    if (this.config.activeClassName) {\n      const tokens = this.config.activeClassName.split(\" \");\n      this.targets.forEach((target) =>\n        target.element.classList.remove(...tokens)\n      );\n    }\n  }\n\n  private static getSelector(ele: HTMLElement): null | string {\n    let selector = null;\n    let hrefAttr = ele.getAttribute(\"href\");\n    if (!hrefAttr || (!hrefAttr.includes(\"#\") && !hrefAttr.startsWith(\".\"))) {\n      return null;\n    }\n\n    if (hrefAttr.includes(\"#\") && !hrefAttr.startsWith(\"#\")) {\n      hrefAttr = `#${hrefAttr.split(\"#\")[1]}`;\n    }\n\n    selector = hrefAttr && hrefAttr !== \"#\" ? hrefAttr.trim() : null;\n    return selector;\n  }\n\n  private static find(selector: string, element: HTMLElement = document.body) {\n    return Element.prototype.querySelector.call(element, selector);\n  }\n}\n\nexport default Scrollspy;\n","import * as Popper from \"@popperjs/core\";\n\nconst NAME = \"dropdown\";\n\ntype Config = {\n  placement: \"top\" | \"right\" | \"bottom\" | \"left\";\n};\n\nconst DefaultConfig: Config = {\n  placement: \"bottom\",\n};\n\nclass Dropdown {\n  private targetElem: HTMLElement;\n\n  private triggerElem: HTMLElement;\n\n  private isShown = false;\n\n  private popper: any = null;\n\n  private config: Config;\n\n  constructor(\n    triggerElement: HTMLElement,\n    targetElement: HTMLElement,\n    config?: Config\n  ) {\n    this.targetElem = targetElement;\n    this.triggerElem = triggerElement;\n    this.config = { ...DefaultConfig, ...(config || {}) };\n    this.triggerElem.addEventListener(\"click\", () => {\n      this.toggle();\n    });\n  }\n\n  static get NAME() {\n    return NAME;\n  }\n\n  private handleClickOutside(ev: MouseEvent): any {\n    const clickedElem = ev.target as Node;\n    if (\n      clickedElem !== this.targetElem &&\n      !this.targetElem.contains(clickedElem) &&\n      !this.triggerElem.contains(clickedElem) &&\n      this.isShown\n    ) {\n      this.hide();\n    }\n    document.body.removeEventListener(\"click\", this.handleClickOutside, true);\n  }\n\n  toggle() {\n    if (this.isShown) {\n      this.hide();\n      document.body.removeEventListener(\"click\", this.handleClickOutside, true);\n    } else {\n      this.show();\n    }\n  }\n\n  show() {\n    this.targetElem.style.display = \"block\";\n\n    document.body.addEventListener(\n      \"click\",\n      (ev) => {\n        this.handleClickOutside(ev);\n      },\n      true\n    );\n\n    this.popper = Popper.createPopper(this.triggerElem, this.targetElem, {\n      placement: this.config.placement,\n      modifiers: [\n        {\n          name: \"offset\",\n          options: {\n            offset: [0, 10],\n          },\n        },\n      ],\n    });\n\n    this.popper.update();\n    this.isShown = true;\n  }\n\n  hide() {\n    this.targetElem.style.display = \"none\";\n    if (this.popper) {\n      this.popper.destroy();\n    }\n    this.isShown = false;\n  }\n}\n\nexport default Dropdown;\n","import Offcanvas from \"./offcanvas\";\nimport Scrollspy from \"./scrollspy\";\nimport Dropdown from \"./dropdown\";\n\nexport default {\n  Offcanvas,\n  Scrollspy,\n  Dropdown,\n};\n"]}